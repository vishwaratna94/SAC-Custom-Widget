//FusionCharts Gantt custom widget for SAC Version 1.0.0. Copyright 2021 Arijit Das.
(function() {
    let template = document.createElement("template");
    template.innerHTML = `<div id=chart-container-fgantt></div><style>#chart-container-fgantt{height:500px;}</style>`;
    class FGANTT extends HTMLElement {
        constructor() {
            super();
            let shadowRoot = this.attachShadow({
                mode: "open"
            });
            shadowRoot.appendChild(template.content.cloneNode(true));
            this._props = undefined;
            this._init = true;
            this._firstUpdate = true;
            this._firstResize = true;
            this._selectionEvent = false;
        }
        onCustomWidgetBeforeUpdate(changedProperties) {}
        onCustomWidgetAfterUpdate(changedProperties) {
            var shadow = this.shadowRoot;            
            let LoadLibsAfterUpdate = async function(host, data, props) {
                try {
                    await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.js", shadow);
					await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.gantt.js", shadow);
                    await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/themes/fusioncharts.theme.fusion.js", shadow);
                } catch (e) {
                    console.log(JSON.stringify(e));
                } finally {
                    host.drawChart(data, props);
                }
            };
            if (!(this._init || this._selectionEvent)) {
                if (this._firstUpdate) {
                    LoadLibsAfterUpdate(this, this.$data, this._props);
                    this._firstUpdate = false;
                } else {
                    this.drawChart(this.$data, this._props);
                }
            }
        }
        onCustomWidgetResize(width, height) {
            var shadow = this.shadowRoot;
            this.$width = width + 'px';
            this.$height = height + 'px';
            let LoadLibsAfterResize = async function(host, data, props) {
                try {
                    await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.js", shadow);
					await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.gantt.js", shadow);
                    await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/themes/fusioncharts.theme.fusion.js", shadow);
                } catch (e) {
                    console.log(JSON.stringify(e));
                } finally {
                    host.drawChart(data, props);
                }
            };
            if (this._firstResize) {
                LoadLibsAfterResize(this, this.$data, this._props);
                this._firstResize = false;
            } else {
                this.drawChart(this.$data, this._props);
            }
        }
        connectedCallback() {
            var shadow = this.shadowRoot;
            var custelem = shadow.host;
            this.$width = custelem.parentNode.parentNode.parentNode.style.width;
            this.$height = custelem.parentNode.parentNode.parentNode.style.height;
            let LoadLibs = async function(host, data, props) {
                try {
                    await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.js", shadow);
					await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.gantt.js", shadow);
                    await host.loadScript("https://cdn.fusioncharts.com/fusioncharts/latest/themes/fusioncharts.theme.fusion.js", shadow);
                } catch (e) {
                    console.log(JSON.stringify(e));
                } finally {
                    host.drawChart(data, props);
                }
            };
            LoadLibs(this, this.$data, this._props);
            this._init = false;
        }
        disconnectedCallback() {}
        
        drawChart(value, config) {
            const dataSource = {
			  chart: {
				dateformat: "mm/dd/yyyy",
				theme: "fusion",
				useverticalscrolling: "0"
			  },
			  datatable: {
				headervalign: "bottom",
				datacolumn: [
				  {
					headertext: "Owner",
					headervalign: "bottom",
					headeralign: "left",
					align: "left",
					text: [
					  {
						label: "Product Team"
					  },
					  {
						label: "Marketing Team"
					  },
					  {
						label: "Product Team"
					  },
					  {
						label: "Dev Team"
					  },
					  {
						label: "Design Team"
					  },
					  {
						label: "Dev Team"
					  },
					  {
						label: "QA Team"
					  },
					  {
						label: "Product Team"
					  },
					  {
						label: "Marketing Team"
					  }
					]
				  }
				]
			  },
			  milestones: {
				milestone: [
				  {
					date: "2/11/2018",
					taskid: "4",
					color: "#F2726F",
					shape: "star",
					tooltext: "Prototyping Approved"
				  },
				  {
					date: "3/11/2018",
					taskid: "6",
					color: "#F2726F",
					shape: "star",
					tooltext: "Development Completed"
				  },
				  {
					date: "3/23/2018",
					taskid: "8",
					color: "#F2726F",
					shape: "star",
					tooltext: "UAT Tests Passed"
				  },
				  {
					date: "3/29/2018",
					taskid: "9",
					color: "#F2726F",
					shape: "star",
					tooltext: "Product Launched"
				  }
				]
			  },
			  tasks: {
				task: [
				  {
					id: "1",
					start: "1/1/2018",
					end: "1/13/2018",
					color: "#5D62B5"
				  },
				  {
					id: "2",
					start: "1/4/2018",
					end: "1/21/2018",
					color: "#29C3BE"
				  },
				  {
					id: "3",
					start: "1/22/2018",
					end: "2/4/2018",
					color: "#5D62B5"
				  },
				  {
					id: "4",
					start: "2/5/2018",
					end: "2/11/2018",
					color: "#67CDF2"
				  },
				  {
					id: "5",
					start: "2/12/2018",
					end: "2/18/2018",
					color: "#FFC533"
				  },
				  {
					id: "6",
					start: "2/19/2018",
					end: "3/11/2018",
					color: "#67CDF2"
				  },
				  {
					id: "7",
					start: "3/12/2018",
					end: "3/18/2018",
					color: "#62B58F"
				  },
				  {
					id: "8",
					start: "3/16/2018",
					end: "3/23/2018",
					color: "#5D62B5"
				  },
				  {
					id: "9",
					start: "3/24/2018",
					end: "3/29/2018",
					color: "#29C3BE"
				  }
				]
			  },
			  processes: {
				align: "left",
				headertext: "Tasks",
				headervalign: "bottom",
				headeralign: "left",
				process: [
				  {
					label: "PRD & User-Stories"
				  },
				  {
					label: "Persona & Journey"
				  },
				  {
					label: "Architecture"
				  },
				  {
					label: "Prototyping"
				  },
				  {
					label: "Design"
				  },
				  {
					label: "Development"
				  },
				  {
					label: "Testing & QA"
				  },
				  {
					label: "UAT Test"
				  },
				  {
					label: "Handover & Documentation"
				  }
				]
			  },
			  categories: [
				{
				  category: [
					{
					  start: "1/1/2018",
					  end: "4/1/2018",
					  label: "Project Pipeline for Q1-2018"
					}
				  ]
				},
				{
				  category: [
					{
					  start: "1/1/2018",
					  end: "1/31/2018",
					  label: "Jan"
					},
					{
					  start: "2/1/2018",
					  end: "2/28/2018",
					  label: "Feb"
					},
					{
					  start: "3/1/2018",
					  end: "4/1/2018",
					  label: "Mar"
					}
				  ]
				},
				{
				  category: [
					{
					  start: "1/1/2018",
					  end: "1/7/2018",
					  label: "Week 1"
					},
					{
					  start: "1/8/2018",
					  end: "1/14/2018",
					  label: "Week 2"
					},
					{
					  start: "1/15/2018",
					  end: "1/21/2018",
					  label: "Week 3"
					},
					{
					  start: "1/22/2018",
					  end: "1/28/2018",
					  label: "Week 4"
					},
					{
					  start: "1/29/2018",
					  end: "2/4/2018",
					  label: "Week 5"
					},
					{
					  start: "2/5/2018",
					  end: "2/11/2018",
					  label: "Week 6"
					},
					{
					  start: "2/12/2018",
					  end: "2/18/2018",
					  label: "Week 7"
					},
					{
					  start: "2/19/2018",
					  end: "2/25/2018",
					  label: "Week 8"
					},
					{
					  start: "2/26/2018",
					  end: "3/4/2018",
					  label: "Week 9"
					},
					{
					  start: "3/5/2018",
					  end: "3/11/2018",
					  label: "Week 10"
					},
					{
					  start: "3/12/2018",
					  end: "3/18/2018",
					  label: "Week 11"
					},
					{
					  start: "3/19/2018",
					  end: "3/25/2018",
					  label: "Week 12"
					},
					{
					  start: "3/26/2018",
					  end: "4/1/2018",
					  label: "Week 13"
					}
				  ]
				}
			  ]
			};
			
			var root = this.shadowRoot;
			var container = root.querySelector('#chart-container-fgantt');

			FusionCharts.ready(function() {				
			  var myChart = new FusionCharts({
				type: "gantt",
				renderAt: container,
				width: "100%",
				height: "100%",
				dataFormat: "json",
				dataSource
			  }).render();
			});
        }
        loadScript(src, shadowRoot) {
            return new Promise(function(resolve, reject) {
                let script = document.createElement('script');
                script.src = src;
                script.onload = () => {
                    console.log("Load: " + src);
                    resolve(script);
                };
                script.onerror = () => reject(new Error(`Script load error for ${src}`));
                shadowRoot.appendChild(script);
            });
        }        
    }
    customElements.define("com-gmail-cse-ari007-fusiongantt", FGANTT);
})();